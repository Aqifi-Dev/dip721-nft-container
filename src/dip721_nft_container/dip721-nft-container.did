type OwnerResult = variant {
    Err : ApiError;
    Ok : principal;
};
type ApiError = variant {
    Unauthorized;
    InvalidTokenId;
    ZeroAddress;
    Other;
    ZeroValue;
    EmptyString;
};
type TxReceipt = variant {
    Ok : nat;
    Err : ApiError;
};
type GetMetadataRessult = variant {
    Ok : text;
    Err : ApiError;
};
type InterfaceId = variant {
    Approval;
    TransactionHistory;
    Mint;
    Burn;
    TransferNotification;
};
type LogoResult = record {
    logo_type : text;
    data : text;
};
type ExtendedMetadataResult = record {
    metadata_desc : text;
    token_id : nat64;
};
type MetadataResult = variant {
    Ok : MetadataDesc;
    Err : ApiError;
};
type MetadataDesc = vec MetadataPart;
type MetadataPart = record {
    purpose : MetadataPurpose;
    key_val_data : vec MetadataKeyVal;
    data : blob;
};
type MetadataPurpose = variant {
    Preview;
    Rendered;
};
type MetadataKeyVal = record {
    text;
    MetadataVal;
};
type MetadataVal = variant {
    TextContent : text;
    BlobContent : blob;
    NatContent : nat;
    Nat8Content : nat8;
    Nat16Content : nat16;
    Nat32Content : nat32;
    Nat64Content : nat64;
};
type TxResult = record { // ???
    fee : nat;
    transaction_type : TransactionType;
};
type TransactionType = variant {
    Transfer : record {
        token_id : nat64;
        from : principal;
        to : principal;
    };
    TransferFrom : record {
        token_id : nat64;
        from : principal;
        to : principal;
    };
    Approve : record {
        token_id : nat64;
        from : principal;
        to : principal;
    };
    SetApprovalForAll : record {
        from : principal;
        to : principal;
    };
    Mint : record {
        token_id : nat64;
    };
    Burn : record {
        token_id : nat64;
    };
};

type MintReceipt = variant {
    Err : variant {
        Unauthorized;
    };
    Ok : record {
        token_id : nat64;
        id : nat;
    };
};

type BurnRequest = record {
    token_id : nat64;
};

type InitArgs = record {
    custodians : opt vec principal;
    logo : opt LogoResult;
    name : text;
    symbol : text;
};

type ManageResult = variant {
    Ok : nat64;
    Err : ApiError;
};

type HttpRequest = record {
    method : text;
    url : text;
    headers : vec record { text; text; };
    body : blob;
};

type HttpResponse = record {
    status_code : nat16;
    headers : vec record { text; text; };
    body : blob;
};

service : (InitArgs) -> {
    balanceOfDip721 : (user : principal) -> (nat64) query;
    ownerOfDip721 : (token_id : nat64) -> (OwnerResult) query;
    safeTransferFromDip721 : (from : principal, to : principal, token_id : nat64) -> (TxReceipt);
    transferFromDip721 : (from : principal, to : principal, token_id : nat64) -> (TxReceipt);
    supportedInterfacesDip721 : () -> (vec InterfaceId) query;
    logoDip721 : () -> (LogoResult) query;
    nameDip721 : () -> (text) query;
    symbolDip721 : () -> (text) query;
    totalSupplyDip721 : () -> (nat64) query;
    getMetadataDip721 : (token_id : nat64) -> (text) query;
    get_metadata_v2 : (token_id : nat64) -> (GetMetadataRessult) query;
    get_metadata_last : () -> (GetMetadataRessult) query;
    safeTransferFromNotifyDip721 : (from : principal, to : principal, token_id : nat64, data : vec nat8) -> (TxReceipt);
    transferFromNotifyDip721 : (from : principal, to : principal, token_id : nat64, data : vec nat8) -> (TxReceipt);
    approveDip721 : (user : principal, token_id : nat64) -> (TxReceipt) /*query*/;
    setApprovalForAllDip721 : (operator : principal, isApproved : bool) -> (TxReceipt);
    getApprovedDip721 : (token_id : nat64) -> (TxReceipt) query;
    isApprovedForAllDip721 : (operator : principal) -> (bool) query;
    get_price : (target_canister_id : principal) -> (nat64, text);
    mintDip721 : (to : principal, metadata : text) -> (MintReceipt);
    mintDip721forall : (to : principal, metadata : text) -> (MintReceipt);
    set_metadata : (nft_id: nat64, metadata : text) -> (ManageResult);
    burnDip721 : (token_id : nat64) -> (TxReceipt);

    set_name : (name : text) -> (ManageResult);
    set_symbol : (sym : text) -> (ManageResult);
    set_logo : (logo : opt LogoResult) -> (ManageResult);
    set_custodian : (user : principal, custodian : bool) -> (ManageResult);
    is_custodian : (principal) -> (bool) query;
    http_request : (HttpRequest) -> (HttpResponse) query;
}
